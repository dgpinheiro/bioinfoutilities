#!/usr/bin/env python
#
"""
Merge lump stop tags.

% python scripts/merge-stoptags.py <base>
"""

import argparse
import khmer
from khmer import Nodegraph
from khmer.khmer_args import info
from khmer.kfile import check_input_files, check_space
import textwrap
import os
import sys

import glob

DEFAULT_K = 32

def get_parser():
    epilog = """
    Merge all lump.stoptags generated by find-knots.py

    """
    parser = argparse.ArgumentParser(
        description="Merge all lump.stoptags",
        epilog=textwrap.dedent(epilog),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    parser.add_argument('--ksize', '-k', default=DEFAULT_K, type=int,
                        help='k-mer size')

    parser.add_argument('stdbase', help='Basename for the input directories')
    parser.add_argument('--version', action='version', version='%(prog)s ' +
                        khmer.__version__)
    return parser


def main():
    info('merge-stoptags.py')
    args = get_parser().parse_args()

    stdbase = args.stdbase

    # @RamRS: This might need some more work
    infiles = []
    for _ in glob.glob(stdbase + "*/*.stoptags") :
    	if os.path.exists(_):
        	check_input_files(_, False)
        	infiles.append(_)

    check_space(infiles, False)
    ht = Nodegraph(args.ksize, 1, 1)
    for _ in infiles:
        print('loading stoptags ', _, file=sys.stderr)
        ht.load_stop_tags(_, 0)

    print('writing file merge.stoptags, with K', args.ksize, file=sys.stderr)
    ht.save_stop_tags('merge.stoptags')

    print('done!', file=sys.stderr)

if __name__ == '__main__':
    main()
